#+Title: My Emacs configuration
#+OPTIONS: toc:4 h:4
#+STARTUP: overview
#+PROPERTY: header-args:emacs-lisp   :tangle "~/.emacs.d/init.el"

* Configuration
** System & personal info

I set this up first, because:

- I use Emacs on multiple devices with different operating systems
- I want different contact info set on work vs. personal machines
- Some things need to be loaded (or not, or differently) based on the OS

My user name stays the same across contexts:
#+begin_src emacs-lisp
  (setq user-full-name "Kristina M. Spurgin")
#+end_src

Add functions to define computer operating systems and contexts:
#+BEGIN_SRC emacs-lisp
  (defun init-computer-os ()
    (cond ((equal (system-name) "secunit") 'nix)
	  ((equal (system-name) "spore") 'nix)
	  ((equal (system-name) "Kristina-Macbook-Pro.local") 'mac)
	  ((equal (system-name) "Kristina-MBP") 'mac)))

  (defun init-computer-context ()
    (cond ((equal (init-computer-os) 'nix) 'personal)
	  ((equal (init-computer-os) 'mac) 'work)))
#+END_SRC

Then, define contact info depending on context:
#+BEGIN_SRC emacs-lisp
  (when (equal (init-computer-context) 'personal)
    (setq user-mail-address "kristina@le-champignon.net")
    (message "You are on your personal laptop."))
  (when (equal (init-computer-context) 'work)
    (setq user-mail-address "kristina.spurgin@lyrasis.org")
    (message "You are on your work laptop."))
#+END_SRC

Then, if applicable, fix the Mac keyboard:

- turn off any special OS-related keyboard stuff
- set Mac keyboard's left command key to act as meta (i.e. Alt on windows) key
- The right command key still acts as super/command in order to control windows, etc.
#+BEGIN_SRC emacs-lisp
  (when (equal (init-computer-os) 'mac)
    (set-keyboard-coding-system nil)
    (setq mac-command-modifier 'meta)
    (setq mac-right-command-modifier 'super))
#+END_SRC

*** Package management

use-package was added to Emacs 29.1.
**** If we are not on 29.1 yet

The following will set it up the old way in case we are using this on an older version.
#+BEGIN_SRC emacs-lisp
  (when (version< emacs-version "29.1")
    (package-initialize)
    (unless (package-installed-p 'use-package)
      (package-install 'use-package))
    (setq use-package-verbose t)
    (require 'use-package)
    (setq load-prefer-newer t)
    (message "use-package is set up for Emacs <29.1"))
#+END_SRC

**** If we are on 29.1 or newer...

The following allows us to use ~package-install~ to upgrade ~use-package~ to newer versions released on GNU ELPA ([[https://git.savannah.gnu.org/cgit/emacs.git/tree/etc/NEWS?h=emacs-29][src]]):
#+begin_src emacs-lisp
  (when (>= emacs-major-version 29)
    (message "use-package is included by default")
    (setq package-install-upgrade-built-in t))
#+end_src

**** Regardless of version:

Always ensure packages. This means they will be installed if they aren't yet present on the system.

To override this, do ~:ensure nil~ when setting up a package.
#+begin_src emacs-lisp
  (require 'use-package-ensure)
  (setq use-package-always-ensure t)
#+end_src

*** Set up package sources and load paths

Needs to be called as soon as possible for native compilation in certain environments:
#+BEGIN_SRC emacs-lisp
  (use-package exec-path-from-shell
    :if (memq window-system '(mac ns x))
    :config
    (exec-path-from-shell-initialize)
    (message "exec-path-from-shell initialized"))
#+END_SRC

Prevent "Failed to download 'gnu' archive" error when loading archives:
#+BEGIN_SRC emacs-lisp
  (setq gnutls-algorithm-priority "NORMAL:-VERS-TLS1.3")
#+END_SRC

Set up additional repositories/archives for inclusion in =list-packages=, and from which =use-package= can install:
#+BEGIN_SRC emacs-lisp
  (unless (assoc-default "melpa" package-archives)
    (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t))
  (unless (assoc-default "org" package-archives)
    (add-to-list 'package-archives '("org" . "https://orgmode.org/elpa/") t))
  (package-refresh-contents)
  (message "Loaded package sources")
#+END_SRC

If 29.1 or higher, set up treesit language sources as per [[https://www.masteringemacs.org/article/how-to-get-started-tree-sitter][Mastering Emacs article]]:
#+begin_src emacs-lisp
  (when (>= emacs-major-version 29)
    (setq treesit-language-source-alist
	  '((bash "https://github.com/tree-sitter/tree-sitter-bash")
	    (css "https://github.com/tree-sitter/tree-sitter-css")
	    (elisp "https://github.com/Wilfred/tree-sitter-elisp")
	    (go "https://github.com/tree-sitter/tree-sitter-go")
	    (html "https://github.com/tree-sitter/tree-sitter-html")
	    (javascript "https://github.com/tree-sitter/tree-sitter-javascript" "master" "src")
	    (json "https://github.com/tree-sitter/tree-sitter-json")
	    (make "https://github.com/alemuller/tree-sitter-make")
	    (markdown "https://github.com/ikatyang/tree-sitter-markdown")
	    (python "https://github.com/tree-sitter/tree-sitter-python")
	    (ruby "https://github.com/tree-sitter/tree-sitter-ruby")
	    (yaml "https://github.com/ikatyang/tree-sitter-yaml"))))
#+end_src


Sometimes we want to use stuff from outside the package system.

Typically I save such code to =.emacs.d/lisp= directory, so that's added to my load path:
#+BEGIN_SRC emacs-lisp
  (add-to-list 'load-path "~/.emacs.d/lisp")
#+END_SRC

Load appropriate macro files, depending on device.
#+BEGIN_SRC emacs-lisp
  (when (equal (init-computer-context) 'work)
    (load "LYRASIS_macros")
    (message "work-related macros loaded"))
#+END_SRC


*** Auto-tangle this file

Will run =C-c C-v t= automatically when this file is saved. From [[https://github.com/SophieBosio/.emacs.d#tangling][SophieBosio's emacs.d]].

#+begin_src emacs-lisp
  (defun tangle-init ()
    "If the current buffer is init.org the code-blocks are
  tangled, and the tangled file is compiled."
    (when (equal (buffer-file-name)
		 (expand-file-name (concat user-emacs-directory "init.org")))
      ;; Avoid running hooks when tangling.
      (let ((prog-mode-hook nil))
	(org-babel-tangle))))

  (add-hook 'after-save-hook 'tangle-init)
  (message "Auto-tangling set up")
#+end_src

** Appearance/UI

Stretch the cursor to show the size of the character under cursor. Useful for seeing tabs and other weird whitespace
#+begin_src emacs-lisp
  (setq x-stretch-cursor t)
#+end_src

*** Don't be hideously annoying

- Do not blink the cursor
- Don't ring the error bell at me!
#+begin_src emacs-lisp
  (blink-cursor-mode 0)
  (setq ring-bell-function 'ignore)
#+end_src

*** Hide some stuff

- Hide toolbar (big icons across top)
- Hide scratch file message:
#+begin_src emacs-lisp
  (tool-bar-mode 0)
  (setq initial-scratch-message nil)
#+end_src

Don't show Async Shell Command buffers
#+begin_src emacs-lisp
  (add-to-list 'display-buffer-alist
	       '("\\*Async Shell Command*"
		 (display-buffer-no-window)))
#+end_src

*** Show some stuff

- Show column number in mode line
- Make the display of date and time persistent in mode line
#+begin_src emacs-lisp
  (column-number-mode)
  (setq display-time-day-and-date t) (display-time)
#+end_src

*** Theme, colors, faces
Make the graphical client dark and pretty:

#+begin_src emacs-lisp
  (use-package nordic-night-theme
    :config
    ;; (load-theme 'nordic-midnight t) ;; darker
    (load-theme 'nordic-night t)
    (message "nordic-night theme loaded")) ;; lighter dark

#+end_src

#+begin_src emacs-lisp :tangle no
  (cond ((display-graphic-p)
	 (use-package darktooth-theme
	   :config
	   (load-theme 'darktooth t)
	   (darktooth-modeline)
	   )
	 (message "loaded theme")
	 ))
#+end_src

#+begin_src emacs-lisp
  (custom-set-faces
   ;; make outline around buttons darker
   '(button ((t (:background "#2e3440" :foreground "#88c0d0" :box (:line-width (2 . 2) :color "#555555" :style sunken-button)))))
   ;; done headlines are gray
   '(org-headline-done ((t (:foreground "gray50")))))
  (message "custom faces set")
#+end_src

Automatically turn on sytax highlighting in all buffers:
#+begin_src emacs-lisp
  (global-font-lock-mode 1)
#+end_src

*** Modeline

A minor mode set as diminished will not have its name shown in the modeline.

Minor modes added via =use-package=  have the =:diminish= keyword set in those invocations. The name of the minor mode to diminish only needs to be provided if is isn't the name of the package with "-mode" added to the end.

Built-in modes to diminish are configured here:
#+begin_src emacs-lisp
  (use-package diminish
    :config
    (diminish 'visual-line-mode)
    (message "built-in modes diminished"))
#+end_src

Date/time display:

#+begin_src emacs-lisp
  (setq display-time-24hr-format t)
  (message "date/time display set")
#+end_src

*** General behavior

Do not "helpfully" disable things for me:
#+begin_src emacs-lisp
  (put 'downcase-region 'disabled nil)
  (put 'upcase-region 'disabled nil)
  (put 'narrow-to-region 'disabled nil)
#+end_src

Allows typing just "y" instead of "yes" when you exit:
#+begin_src emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p)
#+end_src

make emacs automatically notice any changes made to files on disk
especially useful for making reftex notice changes to bibtex files
http://josephhall.org/nqb2/index.php/2009/04/11/reftex-1
Fri May 22 19:32:12 EDT 2009
#+begin_src emacs-lisp
  (global-auto-revert-mode t)
#+end_src

Copy (i.e. add to kill ring) the full path of file in buffer
Added 20150916 from [[http://stackoverflow.com/questions/3669511/the-function-to-show-current-files-full-path-in-mini-buffer][here]], modified to suit personal preference:
  #+begin_src emacs-lisp
  (defun copy-buffer-file-path ()
    "Show the full path file name in the minibuffer."
    (interactive)
    (message (buffer-file-name))
    (kill-new (file-truename buffer-file-name))
    )
  (global-set-key "\C-cz" 'copy-buffer-file-path)
  #+end_src

Display line numbers always:
#+begin_src emacs-lisp
  (global-display-line-numbers-mode t)
#+end_src

Suppress default mouse (or trackpad) behaviors:
#+begin_src emacs-lisp
  (use-package disable-mouse)
#+end_src

**** Global key bindings

General/self-explanatory:
#+begin_src emacs-lisp
  (global-set-key (kbd "C-;") 'comment-or-uncomment-region)
#+end_src

Just insert one tab when I hit tab. From: [[http://www.pement.org/emacs_tabs.htm][Understanding GNU Emacs and Tabs]]
#+begin_src emacs-lisp
  (global-set-key (kbd "TAB") 'self-insert-command)
#+end_src

Disable suspend-frame command key bindings because they are annoying AF:
#+begin_src emacs-lisp
  (global-unset-key (kbd "C-z"))
  (global-unset-key (kbd "C-x C-z"))
#+end_src

**** Editing/entering info
Standard indent is 2 spaces:
#+begin_src emacs-lisp
  (setq standard-indent 2)
#+end_src

Indenting with spaces should /never/ insert TABs:
#+begin_src emacs-lisp
  (setq indent-tabs-mode nil)
#+end_src

Do not create new lines when you press the "arrow-down-key" at end of the buffer:
#+begin_src emacs-lisp
  (setq next-line-add-newlines nil)
#+end_src

Move line or region up or down with M-up/down arrow:
#+begin_src emacs-lisp
(use-package move-text
  :config
  (move-text-default-bindings))
#+end_src

=*scratch*= should be in text mode
2014-03-13 - http://emacsworld.blogspot.com/2008/06/changing-default-mode-of-scratch-buffer.html
#+begin_src emacs-lisp
  (setq initial-major-mode 'text-mode)
#+end_src

Pop the mark several times by typing C-u C-SPC C-SPC, instead of having to type C-u C-SPC C-u C-SPC.
Found at http://endlessparentheses.com/faster-pop-to-mark-command.html
#+begin_src emacs-lisp
  (setq set-mark-command-repeat-pop t)
#+end_src

**** Saving, persistence, backups

Kill trailing whitespace on save:
#+begin_src emacs-lisp
  (add-hook 'before-save-hook 'delete-trailing-whitespace)
#+end_src

auto-create non-existing directories to save files
http://atomized.org/2008/12/emacs-create-directory-before-saving/
Sun Dec 14 00:04:46 EST 2008
#+begin_src emacs-lisp
  (add-hook 'before-save-hook
	    #'(lambda ()
		(or (file-exists-p (file-name-directory buffer-file-name))
		    (make-directory (file-name-directory buffer-file-name) t))))
#+end_src

Save the desktop automatically. When you start up again, load the (local) buffers you had open when you closed Emacs. (It won't keep Tramp buffers open, unfortunately.)

Certain types of buffers are not important and we don't want them saved/reopened.
#+BEGIN_SRC emacs-lisp
  (desktop-save-mode 1)
  (add-to-list 'desktop-globals-to-save 'file-name-history)
  (setq desktop-restore-frames t) ;;doesn't seem to work, at least on Ubuntu.
  (setq desktop-buffers-not-to-save
	(concat "\\(" "^nn\\.a[0-9]+\\|\\.log\\|(ftp)\\|^tags\\|^TAGS"
		"\\|\\.emacs.*\\|\\.diary\\|\\.newsrc-dribble\\|\\.bbdb"
		"\\)$"))
  (add-to-list 'desktop-modes-not-to-save 'dired-mode)
  (add-to-list 'desktop-modes-not-to-save 'Info-mode)
  (add-to-list 'desktop-modes-not-to-save 'info-lookup-mode)
  (add-to-list 'desktop-modes-not-to-save 'fundamental-mode)
#+END_SRC

Backups section is stolen wholesale from [[https://github.com/bnbeckwith/bnb-emacs/tree/6072f959b7015baa2b21854017b655890392dee6][here]]. Sensible backup settings from [[https://www.emacswiki.org/emacs/BackupDirectory]]

Here's a quick rundown of the settings:

- [[elisp:(describe-variable%20'backup-by-copying)][~backup-by-copying~]] :: Use copying to create backups when ~t~
- [[elisp:(describe-variable 'create-lockfile)][~create-lockfiles~]] :: Don't use lockfiles if ~nil~
- [[elisp:(describe-variable%20'backup-directory-alist)][~backup-directory-alist~]] :: List of regexp/location pairs of where to backup files
- [[elisp:(describe-variable%20'auto-save-file-name-transforms)][~auto-save-file-name-transforms~]] :: Transform file names before autosave
- [[elisp:(describe-variable%20'delete-old-versions)][~delete-old-versions~]] :: Delete excess backups silently if ~t~
- [[elisp:(describe-variable%20'kept-new-versions)][~kept-new-versions~]] :: Number of newest versions to keep
- [[elisp:(describe-variable%20'kept-old-versions)][~kept-old-versions~]] :: Number of oldest versions to keep
- [[elisp:(describe-variable%20'version-control)][~version-control~]] :: When ~t~, make numeric backup versions always
#+BEGIN_SRC emacs-lisp
  (setq backup-by-copying t
	create-lockfiles nil
	backup-directory-alist '((".*" . "~/.saves"))
	;; auto-save-file-name-transforms `((".*" "~/.saves" t))
	delete-old-versions t
	kept-new-versions 6
	kept-old-versions 2
	version-control t)
#+END_SRC



**** Buffer management: trick out =ibuffer=

I always have waaaay too many things open. =ibuffer= helps me navigate between them and keep track of them (and save, close, etc them in bulk quickly!)

I got my start configuring =ibuffer= with [[http://martinowen.net/blog/2010/02/03/tips-for-emacs-ibuffer.html][this blog post]].

=ibuffer= is so useful that there's no need for the old static buffer list.

Load functions to support human readable filesize in =ibuffer=.
We need to require =ibuffer= first because otherwise definition of the new, inline size column will fail.
#+begin_src emacs-lisp
  (require 'ibuffer)
  (load "ibuffer-human-readable")
  (keymap-global-set "C-x C-b" 'ibuffer)
#+end_src

Set up =ibuffer-vc= to "group ibuffer's list by VC project, or show VC status". Here we also define our columns, including VC status and human-readable size:
#+BEGIN_SRC emacs-lisp
  (use-package ibuffer-vc)
#+END_SRC

Set up my default columns view, using VC and human readable size columns:
#+begin_src emacs-lisp
  (setq ibuffer-formats
	'((mark modified read-only vc-status-mini " "
		(name 18 18 :left :elide)
		" "
		(size-h 9 -1 :right)
		" "
		(mode 16 16 :left :elide)
		" "
		(vc-status 16 16 :left)
		" "
		vc-relative-file)))
#+end_src

I set up my default filter groups below. The repository-based groups produced by
=ibuffer-vc= are interpolated after manually set up groups for projects that span
github repos and data directories.

I figured out how to do this by digging around in =ibuffer-vc.el= and then by
finding [[https://github.com/chrisbarrett/spacemacs-layers/blob/2df814a3c20618a6c4e6d8b424984e84a8714e3f/cb-ibuffer/packages.el#L23][Chris Barrett's spacemacs ibuffer config]] via Github code search.

We keep =ibuffer= updated automagically, with my filter groups applied.

Note: As of 2023-08-25, the VC generated groups do not auto-update in an open ibuffer. If you have files open in the git project =.emacs.d= when you call ibuffer, then the files under that group will upadate as you work. HOWEVER, if you have ibuffer open, and open files in a new VC project, you will not see the group for that project until you kill the ibuffer and open a new one.

**Notes on order of groups**

 - Magit has to be first, or any magit buffers spawned in defined groups will be grouped there, and we'll be unable to easily/quickly kill them.
 - Ongoing client projects are manually defined after magit, so that their code, data, and notes are grouped together
 - Then, auto-generated VC groups
 - Then it sort of doesn't matter

#+BEGIN_SRC emacs-lisp
  (with-eval-after-load 'ibuffer
    (defun kms-ibuffer/vc-filter-groups ()
      (message "CALLED: kms-ibuffer/vc-filter-groups")
      (ibuffer-vc-generate-filter-groups-by-vc-root))


    (defun kms-ibuffer/set-saved-filter-groups ()
      (message "CALLED: kms-ibuffer/set-saved-filter-groups")
      (setq ibuffer-saved-filter-groups
	    `(("filters"
	       ("magit" (name .".*magit"))
	       ("meta" (or
			(basename . "cspace.org")
			(basename . "islandora.org")
			(basename . "meetings.org")
			(basename . "migrations.org")
			(basename . "work.org")
			(name . "\\*scratch\\*")))
	       ("mig: wpl"
		(or (filename . "code/mig/wpl-collectionspace-migration")
		    (filename . "data/wpl_westerville_public_library")
		    (filename . "org/mig/wpl_westerville_public_library_cs.org")))
	       ("mig: az-ccp"
		(or (filename . "code/mig/az_ccp_cspace_migration")
		    (filename . "data/az_ccp")
		    (filename . "org/mig/az_ccp_cs.org")))
	       ("mig: ksu"
		(or (filename . "code/mig/ksu_collectionspace_migration")
		    (filename . "data/ksu")
		    (filename . "org/mig/kennesaw_collectionspace.org")))
	       ,@(kms-ibuffer/vc-filter-groups)
	       ("help" (name . "\\*Help\\*"))
	       ("emacs" (name . "^\\*.*\\*"))))))

    (defun kms-ibuffer/switch-ibuffer-group ()
      (kms-ibuffer/set-saved-filter-groups)
      (ibuffer-switch-to-saved-filter-groups "filters"))

    (add-hook 'ibuffer-mode-hook 'kms-ibuffer/switch-ibuffer-group)
    (add-hook 'ibuffer-mode-hook 'ibuffer-auto-mode))
#+END_SRC

Killing unmodified buffers is not a thing we need to be prompted about. You will still be prompted if you try to kill a modified buffer.
#+BEGIN_SRC emacs-lisp
  (setq ibuffer-expert t)
#+END_SRC

Nor do we want to see empty filter groups. No visual clutter!
#+BEGIN_SRC emacs-lisp
  (setq ibuffer-show-empty-filter-groups nil)
#+END_SRC

**** Completion (in-buffer)

Use YASnippet, but only in the specified modes.

When you create a new key-triggerable snippet, the key must end with ~=~. This allows use of the same ~==~ trigger key set up in Alfred.

For collections of snippets, see: https://github.com/AndreaCrotti/yasnippet-snippets/tree/master/snippets

#+begin_src emacs-lisp
  (use-package yasnippet
    :diminish yas-minor-mode
    :hook ((adoc-mode
           fundamental-mode
           org-mode
           enh-ruby-mode
           ruby-mode
           ruby-ts-mode
           text-mode) . yas-minor-mode)
    :config
    (yas-reload-all)
    (setq yas-expand-only-for-last-commands (self-insert-command 1))
    (define-key yas-minor-mode-map (kbd "=") yas-maybe-expand))
#+end_src

Abbrevs are documented [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Abbrevs.html][in the Emacs manual]]. I still have not figured out the best way to use them, and invariably they become annoying, so they are turned off.
#+BEGIN_SRC emacs-lisp :tangle no
  ;; turn on abbrev mode globally
  (setq-default abbrev-mode t)
  (load "my_abbrevs")
  ;; stop asking whether to save newly added abbrev when quitting emacs
  (setq save-abbrevs nil)
#+END_SRC

**** Completion (minibuffer)

***** Ivy
:PROPERTIES:
:ID:       e0e1e675-8b04-4759-b7a5-4c4c1bbf15d9
:END:
Currently using ivy/counsel. See also [[id:342db027-a04f-4494-addf-50752387b15e][Swiper]].

=ivy= is a generic completion framework in the minibuffer, replacing built-in =ido= functionality.

=counsel= is a collection of =ivy= enhanced versions of common Emacs commands.

[[https://oremacs.com/swiper/][Ivy manual]]

[[https://github.com/abo-abo/swiper/wiki][Ivy/Swiper wiki]] hosts "cool code snippets that you can use once you’re experienced with Elisp and ivy."

#+begin_src emacs-lisp
  (use-package ivy
    :diminish
    :config
    (ivy-mode t)
    ;; disable default behavior of starting filters with =^
    (setq ivy-initial-inputs-alist nil)
    ;; select entered text with C-p/C-n
    (setq ivy-use-selectable-prompt t)
    (message "ivy configured"))
#+end_src

***** Counsel
:PROPERTIES:
:ID:       32ebdbec-9130-4612-810d-1714eeabe100
:END:
#+begin_src emacs-lisp
  (use-package counsel
    :bind (("M-x" . counsel-M-x))
    :config
    (message "counsel configured"))
#+end_src

**** Dired

Do not open a bajillion buffers to navigate file system:
#+begin_src emacs-lisp
  (require 'dired-single)

  (with-eval-after-load 'dired-single
      (defun my-dired-init ()
        "Bunch of stuff to run for dired, either immediately or when it's
       loaded."
        ;; <add other stuff here>
        (define-key dired-mode-map [return] 'joc-dired-single-buffer)
        (define-key dired-mode-map [mouse-1] 'joc-dired-single-buffer-mouse)
        (define-key dired-mode-map "^"
                    (function
                     (lambda nil (interactive) (joc-dired-single-buffer "..")))))
    (my-dired-init))
#+end_src

Show human readable file sizes
from http://pragmaticemacs.com/emacs/dired-human-readable-sizes-and-sort-by-size/
#+begin_src emacs-lisp
  (setq dired-listing-switches "-Alh")
#+end_src

Automatically revert Dired buffers on revisiting their directory:
#+begin_src emacs-lisp
  (setq dired-auto-revert-buffer t)
#+end_src

Non-nil means offer to kill buffers visiting files and dirs deleted in Dired:
#+begin_src emacs-lisp
  (setq dired-clean-up-buffers-too t)
#+end_src

I'm not sure what this does exactly, but try it if the above option nags you about whether to kill buffers:
dired-clean-confirm-killing-deleted-buffers
  User option: If nil, don't ask whether to kill buffers visiting
               deleted files.
  Value: t

Whether Dired should create destination dirs when copying/removing files.
If nil, don’t create them.
If ‘always’, create them without asking.
If ‘ask’, ask for user confirmation.
#+begin_src emacs-lisp
  (setq dired-create-destination-dirs "ask")
#+end_src

For example, if both ‘dired-create-destination-dirs’ and this
option are non-nil, renaming a directory named ‘old_name’ to
‘new_name/’ (note the trailing directory separator) where
‘new_name’ does not exists already, it will be created and
‘old_name’ be moved into it.  If only ‘new_name’ (without the
trailing /) is given or this option or
‘dired-create-destination-dirs’ is nil, ‘old_name’ will be
renamed to ‘new_name’.
#+begin_src emacs-lisp
  (setq dired-create-destination-dirs-on-trailing-dirsep t)
  (message "dired customizations loaded")
#+end_src

**** Projectile
#+BEGIN_QUOTE
Projectile is a project interaction library for Emacs. Its goal is to provide a nice set of features operating on a project level without introducing external dependencies (when feasible). --[[https://projectile.readthedocs.io/en/latest/][Projectile docs]]
#+END_QUOTE

Use native indexing method so that git-ignored data directories/files are seen as part of project.
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :diminish
    :config
    (define-key projectile-mode-map (kbd "s-p") 'projectile-command-map)
    (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
    (projectile-mode +1)
    (setq projectile-completion-system 'ivy)
    (setq projectile-create-missing-test-files "t")
    (setq projectile-indexing-method 'native)
    (message "projectile configured"))
#+END_SRC
***** TODO Read up on Projectile and configure
:LOGBOOK:
- State "TODO"       from              [2019-10-22 Tue 22:27]
:END:
https://projectile.readthedocs.io/en/latest/usage/
**** Search, find, replace
***** Grep: Search things not open in emacs

#+begin_src emacs-lisp
  (when (equal (init-computer-os) 'mac)
    (setq-default xref-search-program 'ugrep)
    (setq-default grep-template "ugrep --color=always -0Iinr -e <R>")
    (message "using ugrep"))
#+end_src

Control which directories are excluded by grep:
#+BEGIN_SRC emacs-lisp
  (eval-after-load 'grep
    '(progn
       (add-to-list 'grep-find-ignored-directories "auto")
       (add-to-list 'grep-find-ignored-directories "bundle")
       (add-to-list 'grep-find-ignored-directories ".bundle")
       (add-to-list 'grep-find-ignored-directories "coverage")
       (add-to-list 'grep-find-ignored-directories "docs")
       (add-to-list 'grep-find-ignored-directories "elpa")
       (add-to-list 'grep-find-ignored-directories "node_modules")
       (add-to-list 'grep-find-ignored-directories "packs")
       (add-to-list 'grep-find-ignored-directories "spring")
       (add-to-list 'grep-find-ignored-directories "storage")
       (add-to-list 'grep-find-ignored-directories "tmp")
       (add-to-list 'grep-find-ignored-directories ".yardoc")))
  (add-hook 'grep-mode-hook (lambda () (toggle-truncate-lines 1)))
  (message "grep customizations loaded")
#+END_SRC

***** Swiper: Search things in emacs
:PROPERTIES:
:ID:       342db027-a04f-4494-addf-50752387b15e
:END:

See also:
  - [[id:e0e1e675-8b04-4759-b7a5-4c4c1bbf15d9][Ivy config]]
  - [[id:32ebdbec-9130-4612-810d-1714eeabe100][Counsel config]]

#+begin_quote
Swiper helps you search through emacs, and shows you text around the matching terms. It turns out Ivy is actually required for Swiper to work. If you install Swiper, Ivy gets installed as a dependency.
#+end_quote

#+begin_src emacs-lisp
  (use-package swiper
    :bind (("C-s" . swiper))
    :config
    (message "swiper configured"))
#+end_src

#+begin_quote
Now, you can search through Emacs using Swiper. When you run =C-s= the swiper search will be used instead of isearch. When you search you can use the same regular expression Ivy has to find a specific result you’re looking for.
#+end_quote

[[https://github.com/abo-abo/swiper/wiki][Ivy/Swiper wiki]] hosts "cool code snippets that you can use once you’re experienced with Elisp and ivy."

***** Visual regex on steroids

#+begin_src emacs-lisp
  (use-package visual-regexp-steroids
    :ensure visual-regexp
    :bind (("C-c r" . vr/replace)
	   ("C-c q" . vr/query-replace)
	   ("C-M-R" . vr/isearch-backward)
	   ("C-M-S" . vr/isearch-forward))
    :config
    (message "visual-regexp-steroids configured"))
#+end_src

***** Hide matching lines

Do an incremental search on a regexp and hide lines that match the regexp.

#+begin_src emacs-lisp
  (require 'hide-lines)
  (message "hide-lines loaded")
  (require 'hidesearch)
  (message "hidesearch loaded")
#+end_src

**** Tramp

#+begin_src emacs-lisp
  (require 'tramp)
  (cond ((string-equal system-type 'gnu/linux)
	 (setq tramp-default-method "ssh"))
	((string-equal system-type 'darwin)
	 (setq tramp-default-method "ssh")))
  (message "tramp configured")
#+end_src


**** Window management

Burly "provides tools to save and restore frame and window configurations in Emacs, including buffers that may not be live anymore. In this way, it’s like a lightweight “workspace” manager, allowing you to easily restore one or more frames, including their windows, the windows’ layout, and their buffers." --[[https://github.com/alphapapa/burly.el][github]]

#+begin_src emacs-lisp :tangle no
  (use-package burly)
#+end_src

Turns on S-left, S-right, etc. to move between windows. Turns off shift-selection, which I never used:
#+begin_src emacs-lisp
  (windmove-default-keybindings)
#+end_src

Select help/info/apropos buffer when you open it:
#+begin_src emacs-lisp
  (setq help-window-select t)
#+end_src

**** Movement

#+begin_src emacs-lisp
  (global-set-key (kbd "M-g 8")
		  (lambda () (interactive) (move-to-column 80)))
#+end_src

** Coding
*** General
#+BEGIN_SRC emacs-lisp
  (add-hook 'prog-mode-hook 'show-paren-mode)
  (setq blink-matching-paren nil)
  (setq show-paren-delay 0)
  (setq show-paren-style 'expression)
#+END_SRC

Added 2022-09-23: [[https://github.com/jordonbiondo/column-enforce-mode][Highlight text that extends beyond a certain column:]]

whitespace-mode does this as well, but makes things too visually noisy.
#+BEGIN_SRC emacs-lisp
  (use-package column-enforce-mode
    :after (yaml-ts-mode)
    :hook (prog-mode yaml-ts-mode)
    :diminish
    :config
      (message "column-enforce-mode configured"))
#+END_SRC

Show visual indication of where max column is, before you get to it. Appears to break other stuff.
#+begin_src emacs-lisp :tangle no
  (add-hook 'prog-mode-hook #'display-fill-column-indicator-mode)
#+end_src

#+begin_src emacs-lisp
(add-hook 'prog-mode-hook (lambda () (setq display-fill-column-indicator-column 80)))
#+end_src

**** Tree-sitter
:PROPERTIES:
:ID:       25b27c50-cef0-4efc-9be2-5ba0411a3656
:END:

As per: https://www.masteringemacs.org/article/how-to-get-started-tree-sitter
#+begin_src emacs-lisp
  (add-to-list 'auto-mode-alist '("\\(/\\|\\`\\)\\.\\(bash_\\(profile\\|history\\|log\\(in\\|out\\)\\)\\|z?log\\(in\\|out\\)\\)\\'" . bash-ts-mode))
  (add-to-list 'auto-mode-alist '("\\(/\\|\\`\\)\\.\\(shrc\\|zshrc\\|m?kshrc\\|bashrc\\|t?cshrc\\|esrc\\)\\'" . bash-ts-mode))
  (add-to-list 'auto-mode-alist '("\\(/\\|\\`\\)\\.\\([kz]shenv\\|xinitrc\\|startxrc\\|xsession\\)\\'" . bash-ts-mode))
  (add-to-list 'auto-mode-alist '("\\.json\\'" . json-ts-mode))
  (add-to-list 'auto-mode-alist '("\\.\\(e?ya?\\|ra\\)ml\\'" . yaml-ts-mode))
  (message "treesitter auto-mode-alist configured")
#+end_src

**** Setup editorconfig
https://github.com/editorconfig/editorconfig-emacs#readme
#+BEGIN_SRC emacs-lisp
  (use-package editorconfig
    :diminish
    :config
    (editorconfig-mode 1)
    (message "editorconfig configured"))
#+END_SRC

*** Javascript
#+BEGIN_SRC emacs-lisp
  (add-hook 'js-mode-hook (lambda () (electric-indent-local-mode -1)))
  (message "javascript customizations loaded")
#+END_SRC
*** Perl

=cperl-mode= is an enhanced Perl mode.
#+BEGIN_SRC emacs-lisp
  (use-package cperl-mode
    :mode "\\.p[lm]\\'"
    :interpreter "perl"
    :config
    (load "cperl-setup")
    (message "cperl-mode configured"))
#+END_SRC

*** Ruby

Use enhanced ruby mode. As of [2023-08-29 Tue], tree-sitter mode for ruby doesn't add any killer features, AND it turns off block highlighting and navigating by sexp.

Going back to using enh-ruby-mode.

I've customized the color of the double/single quote string delimiters because the default was hard to see on a dark background.
#+begin_src emacs-lisp
  (use-package enh-ruby-mode
    :mode "\\(?:\\.\\(?:rbw?\\|ru\\|rake\\|thor\\|jbuilder\\|rabl\\|gemspec\\|podspec\\)\\|/\\(?:Gem\\|Rake\\|Cap\\|Thor\\|Puppet\\|Berks\\|Brew\\|Vagrant\\|Guard\\|Pod\\)file\\)\\'"
    :interpreter "ruby"
    :custom-face
    (enh-ruby-string-delimiter-face ((t (:foreground "wheat1"))))
    (enh-ruby-heredoc-delimiter-face ((t (:foreground "gray75"))))
    (enh-ruby-regexp-delimiter-face ((t (:foreground "gray75"))))
    (erm-syn-errline ((t (:foreground "#bf616a" :underline nil))))
    (erm-syn-warnline ((t (:foreground "DarkOrange1" :underline nil))))
    :config
    (message "enh-ruby-mode configured"))
#+end_src

Added 2022-09-23:
#+BEGIN_SRC emacs-lisp
  (use-package ruby-refactor
    :diminish
    :hook ((enh-ruby-mode ruby-mode ruby-ts-mode) . ruby-refactor-mode-launch)
    :config
    (message "ruby-refactor configured"))
#+END_SRC
**** Ruby style

As of [2023-08-22 Tue], I can't figure out how to make the ruby-ts-mode indentation enforce the following standardrb cop:

#+begin_example
Layout/AccessModifierIndentationLayout/ArgumentAlignment:
  Enabled: true
  EnforcedStyle: with_fixed_indentation
#+end_example

#+begin_src emacs-lisp
  (setq ruby-deep-arglist nil)
  (setq ruby-deep-indent-paren nil)
  (setq ruby-method-params-indent 0)
  (setq ruby-after-operator-indent nil)
  (setq ruby-aligned-chain-calls nil)
  (setq ruby-align-to-stmt-keywords nil)
  (setq ruby-block-indent nil)
  (setq ruby-method-call-indent nil)
  (message "ruby style customizations loaded")
#+end_src

Install rubocop for emacs. Setting to autocorrect on save will fix the indentation:

#+begin_src emacs-lisp
  (use-package rubocop
    :commands rubocop-mode
    :diminish
    :hook ((enh-ruby-mode ruby-mode ruby-ts-mode) . rubocop-mode)
    :config
    (setq rubocop-autocorrect-on-save t)
    (message "rubocop-mode configured"))
#+end_src

**** Functions and macros

***** =kms-ruby-unnest-module-namespace=

Given the ruby code:

#+begin_src ruby :tangle no
  module A
    module B
      module C
#+end_src

Place point on the =C= on the 3rd line and run this macro three times to produce:

#+begin_src ruby :tangle no
  module A::B::C
#+end_src

#+begin_src emacs-lisp
  (defalias 'kms-ruby-unnest-module-namespace
     (kmacro "M-0 C-k <backspace> : : C-b M-b"))
#+end_src


**** Deprecating

***** Tree-sitter for ruby

#+begin_src emacs-lisp :tangle no
  ;; (add-to-list 'auto-mode-alist '("\\(?:\\.\\(?:rbw?\\|ru\\|rake\\|thor\\|jbuilder\\|rabl\\|gemspec\\|podspec\\)\\|/\\(?:Gem\\|Rake\\|Cap\\|Thor\\|Puppet\\|Berks\\|Brew\\|Vagrant\\|Guard\\|Pod\\)file\\)\\'" . ruby-ts-mode))
#+end_src

** Data
*** nhexl-mode
#+BEGIN_SRC emacs-lisp
  (use-package nhexl-mode
    :config
    (message "nhexl-mode configured"))
#+END_SRC

*** XML

The following enables folding of XML

From: https://emacs.stackexchange.com/questions/2884/the-old-how-to-fold-xml-question
#+BEGIN_SRC emacs-lisp
  (require 'hideshow)
  (require 'sgml-mode)
  (require 'nxml-mode)
  (add-to-list 'hs-special-modes-alist
	       '(nxml-mode
		 "<!--\\|<[^/>]*[^/]>"
		 "-->\\|</[^/>]*[^/]>"

		 "<!--"
		 sgml-skip-tag-forward
		 nil))
  (add-hook 'nxml-mode-hook 'hs-minor-mode)
  (define-key nxml-mode-map (kbd "C-c h") 'hs-toggle-hiding)
  (message "sgml/nxml mode customizations loaded")
#+END_SRC
*** YAML

See also [[id:25b27c50-cef0-4efc-9be2-5ba0411a3656][Tree-sitter under general coding config]]
#+BEGIN_SRC emacs-lisp :tangle no
  (use-package yaml-mode
    :mode (("\\.yml\\'" . yaml-mode)
	   ("\\.yaml\\'" . yaml-mode))
    :config
    (message "yaml-mode configured"))
#+END_SRC

** Org-mode

Everything would be worse than it is if there were no =org-mode=. Use it, USE IT, *USE IT*.

It has been included in Emacs by default since 22.1, but just in case...
#+BEGIN_SRC emacs-lisp :tangle no
  (when (<= emacs-major-version 22)
    (use-package org))
#+END_SRC

*** Org-mode appearance, formatting

When Visual Line mode is enabled, ‘word-wrap’ is turned on in this buffer, and simple editing commands are redefined to act on visual lines, not logical lines.
#+begin_src emacs-lisp
  (with-eval-after-load 'org
    (add-hook 'org-mode-hook #'visual-line-mode))
#+end_src

Visually style text, but don't show formatting characters:
#+begin_src emacs-lisp
  (with-eval-after-load 'org
    (setq org-hide-emphasis-markers t)
    (setq org-fontify-emphasized-text t))
#+end_src

Show leading stars!
#+begin_src emacs-lisp
  (with-eval-after-load 'org
    (setq org-hide-leading-stars nil))
#+end_src

Non-nil means turn on ‘org-indent-mode’ on startup.
This can also be configured on a per-file basis by adding one of
the following lines anywhere in the buffer:
#+begin_example
,#+STARTUP: indent
,#+STARTUP: noindent
#+end_example

#+begin_src emacs-lisp
  (with-eval-after-load 'org
    (setq org-startup-indented nil))
#+end_src

Insert blank lines before headings but not new list items:
#+begin_src emacs-lisp
  (with-eval-after-load 'org
    (setf org-blank-before-new-entry '((heading . t) (plain-list-item . auto))))
#+end_src

Format DONE headings:
#+begin_src emacs-lisp
  (with-eval-after-load 'org
    (custom-set-faces
     '(org-headline-done ((t (:foreground "gray50")))))
    (setq org-fontify-done-headline t))
#+end_src

Store clock data, state changes, and state notes are in the LOGBOOK drawer:
#+begin_src emacs-lisp
  (with-eval-after-load 'org
    (setq org-clock-into-drawer t)
    (setq org-log-into-drawer t))
#+end_src

#+begin_src emacs-lisp
  (with-eval-after-load 'org
    (message "org-mode appearance customizations loaded"))
#+end_src
*** Org-mode editing

Check if in invisible region before inserting or deleting a character.
#+begin_src emacs-lisp
  (with-eval-after-load 'org
    (setq org-fold-catch-invisible-edits "smart"))
#+end_src

C-a moves to beginning of heading (after asterisks and todo states, etc).
C-e moves to end of heading (before tags).
https://emacs.stackexchange.com/questions/26287/move-to-the-beginning-of-a-heading-smartly-in-org-mode
#+BEGIN_SRC emacs-lisp
  (with-eval-after-load 'org
    (setq org-special-ctrl-a/e t))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (with-eval-after-load 'org
    (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp")))
#+END_SRC

#+begin_src emacs-lisp
  (with-eval-after-load 'org
    (message "org-mode editing behavior customizations loaded"))
#+end_src

*** Org-mode navigation

The maximum level for Imenu access to Org headlines:
#+begin_src emacs-lisp
  (with-eval-after-load 'org
    (setq org-imenu-depth 5))
#+end_src

#+begin_src emacs-lisp
  (with-eval-after-load 'org
    (message "org-mode navigation customizations loaded"))
#+end_src

*** Org-mode keybindings - global
#+begin_src emacs-lisp
  (with-eval-after-load 'org
    (global-set-key "\C-cl" 'org-store-link)
    (global-set-key "\C-cc" 'org-capture)
    (global-set-key "\C-ca" 'org-agenda)
    (global-set-key "\C-cb" 'org-iswitchb))
#+end_src

Turn off using =C-_= to access =undo=, to break muscle memory. Use =C-/= instead:
#+begin_src emacs-lisp
  (with-eval-after-load 'org
    (global-set-key "\C-_" nil))
#+end_src

#+begin_src emacs-lisp
  (with-eval-after-load 'org
    (message "org-mode key bindings loaded"))
#+end_src

*** Org-mode agenda

Conditionally set up agenda files. Currently only using at work:
#+BEGIN_SRC emacs-lisp
  (with-eval-after-load 'org
    (when (equal (init-computer-context) 'work)
    (setq org-agenda-files
	  (delq nil
		(mapcar (lambda (x) (and (file-exists-p x) x))
			'("~/org/archivesspace.org"
			  "~/org/cspace.org"
			  "~/org/islandora.org"
			  "~/org/meetings.org"
			  "~/org/migrations.org"
			  "~/org/notes.org"
			  "~/org/work.org"
			  "~/org/mig/wpl_westerville_public_library_cs.org"
			  "~/org/mig/lafayette_college_collectionspace.org"
			  "~/org/mig/az_ccp_cs.org"
			  "~/org/mig/kennesaw_collectionspace.org"))))))
#+END_SRC

Non-nil means ‘org-agenda’ shows every day in the selected range.
When nil, only the days which actually have entries are shown.
#+begin_src emacs-lisp
  (with-eval-after-load 'org
    (setq org-agenda-show-all-dates t))
#+end_src

Non-nil means don’t show deadlines when the corresponding item is done.
When nil, the deadline is still shown and should give you a happy feeling.
This is relevant for the daily/weekly agenda.  It applies only to the
actual date of the deadline.  Warnings about approaching and past-due
deadlines are always turned off when the item is DONE.
#+begin_src emacs-lisp
  (with-eval-after-load 'org
    (setq org-agenda-skip-deadline-if-done t))
#+end_src

Non-nil means don’t show scheduled items in agenda when they are done.
This is relevant for the daily/weekly agenda, not for the TODO list.  It
applies only to the actual date of the scheduling.  Warnings about an item
with a past scheduling dates are always turned off when the item is DONE.
#+begin_src emacs-lisp
  (with-eval-after-load 'org
    (setq org-agenda-skip-scheduled-if-done t))
#+end_src

#+begin_src emacs-lisp
  (with-eval-after-load 'org
    (message "org-mode agenda customizations loaded"))
#+end_src

*** Org-mode clocking time

By customizing the variable org-clock-idle-time to some integer, such as 10 or 15, Emacs can alert you when you get back to your computer after being idle for that many minutes, and ask what you want to do with the idle time. There will be a question waiting for you when you get back, indicating how much idle time has passed constantly updated with the current amount, as well as a set of choices to correct the discrepancy ... What if you subtracted those away minutes from the current clock, and now want to apply them to a new clock? Simply clock in to any task immediately after the subtraction. Org will notice that you have subtracted time “on the books”, so to speak, and will ask if you want to apply those minutes to the next task you clock in on.

There is one other instance when this clock resolution magic occurs. Say you were clocked in and hacking away, and suddenly your cat chased a mouse who scared a hamster that crashed into your UPS’s power button! You suddenly lose all your buffers, but thanks to auto-save you still have your recent Org mode changes, including your last clock in.

If you restart Emacs and clock into any task, Org will notice that you have a dangling clock which was never clocked out from your last session. Using that clock’s starting time as the beginning of the unaccounted-for period, Org will ask how you want to resolve that time. The logic and behavior is identical to dealing with away time due to idleness; it is just happening due to a recovery event rather than a set amount of idle time.

You can also check all the files visited by your Org agenda for dangling clocks at any time using M-x org-resolve-clocks RET (or C-c C-x C-z). ([[https://orgmode.org/manual/Resolving-idle-time.html#index-org_002dclock_002didle_002dtime][src]])
#+begin_src emacs-lisp
  (with-eval-after-load 'org
    (setq org-clock-idle-time 5)
    (message "org-clock-idle-time set"))
#+end_src

Sometimes I change tasks I'm clocking quickly - this removes clocked tasks with 0:00 duration
#+begin_src emacs-lisp
  (with-eval-after-load 'org
    (setq org-clock-out-remove-zero-time-clocks t))
#+end_src

Save buffer after clocking in or out:
#+begin_src emacs-lisp
  (with-eval-after-load 'org
    (add-hook 'org-clock-in-hook #'save-buffer)
  (add-hook 'org-clock-out-hook #'save-buffer))
#+end_src

Whether or not a dialog opens every time you clock out, so you can enter a note.

Left nil because I don't often need to enter a note. This is the format that it uses to create a note, where the note is under the clock entry it refers to:

#+begin_example
   :LOGBOOK:
   CLOCK: [2023-08-22 Tue 12:20]--[2023-08-22 Tue 12:21] =>  0:01
   - testing note
#+end_example

#+begin_src emacs-lisp
  (with-eval-after-load 'org
    (setq org-log-note-clock-out nil))
#+end_src

#+begin_src emacs-lisp
  (with-eval-after-load 'org
    (setq org-duration-format 'h:mm))
#+end_src

#+begin_src emacs-lisp
  (with-eval-after-load 'org
    (message "org-mode agenda customizations loaded"))
#+end_src

*** Org-mode scheduling, reminders, etc.

Number of days before expiration during which a deadline becomes active.
This variable governs the display in sparse trees and in the agenda.
When 0 or negative, it means use this number (the absolute value of it)
even if a deadline has a different individual lead time specified.
#+begin_src emacs-lisp
  (setq org-deadline-warning-days 0)
#+end_src

*** Org-mode filing/refiling

The following setting creates a unique task ID for the heading in the PROPERTY drawer when I use C-c l. This allows me to move the task around arbitrarily in my org files and the link to it still works.

From: http://doc.norang.ca/org-mode.html
#+begin_src emacs-lisp
  (setq org-id-link-to-org-use-id 'create-if-interactive-and-no-custom-id)
#+end_src

Use all of my agenda files as refile targets:
#+BEGIN_SRC emacs-lisp
  (setq org-refile-targets '((org-agenda-files :maxlevel . 3)))
#+END_SRC

From https://blog.aaronbieber.com/2017/03/19/organizing-notes-with-refile.html:

#+BEGIN_QUOTE
We configure org-refile-use-outline-path to tell Org to include the destination file as an element in the path to a heading, and to use the full paths as completion targets rather than just the heading text itself.

What this results in is a targets listing containing forward-slash-delimited filenames and headings, as though they were paths on disk. Because the filename also appears by itself, you can select that to refile to the top level of the file.
#+END_QUOTE
#+BEGIN_SRC emacs-lisp
  (setq org-refile-use-outline-path 'file)
#+END_SRC

From https://blog.aaronbieber.com/2017/03/19/organizing-notes-with-refile.html:

#+BEGIN_QUOTE
...The default behavior for Refile is to allow you to do a step-by-step completion of this path, but if you’re using Helm, Helm is overriding the completing read to make it into a narrowing list (that we have all come to love).

So what you need to do is tell Org that you don’t want to complete in steps; you want Org to generate all of the possible completions and present them at once. Helm then lets you narrow to the one you want.
#+END_QUOTE
#+BEGIN_SRC emacs-lisp
  (setq org-outline-path-complete-in-steps nil)
#+END_SRC

From https://blog.aaronbieber.com/2017/03/19/organizing-notes-with-refile.html:

#+BEGIN_QUOTE
Occasionally you may want to refile something into another file or heading and place it beneath a new parent that you create on-the-fly. If you do not set up this configuration, you will not be able to create new parents during refile, so I recommend setting it up.
#+END_QUOTE
#+BEGIN_SRC emacs-lisp
  (setq org-refile-allow-creating-parent-nodes 'confirm)
#+END_SRC

*** Org-mode todos

The codes after the state keywords are documented [[https://orgmode.org/manual/Tracking-TODO-state-changes.html#Tracking-TODO-state-changes][here]].

- ! = timestamp
- @ = record note

The sequences representing action items are the ones starting with TODO and ASK. These are separate because they feel different to me and I want to require having to record a note when an ASK becomes ANSWERED.

MTG is so I can clock time in meetings.

ONGOING is so I can clock time in non-meeting activities that aren't tasks or projects, like email/communication and meta-work.
#+BEGIN_SRC emacs-lisp
  (setq org-todo-keywords
	'((sequence "TODO(t!)" "INPROGRESS(p!)" "DELEGATED(a@/!)" "WAITING(w@/!)" "|" "DONE(d!)" )
	  (sequence "|" "CANCELED(c@)" )
	  (sequence "ASK(s!)" "|" "ANSWERED(n@/!)" )
	  (sequence "MTG(m)" "|" )
	  (sequence "ONGOING(o)" "|" )))
#+END_SRC

Non-nil means undone TODO entries will block switching the parent to DONE.
Also, if a parent has an :ORDERED: property, switching an entry to DONE will
be blocked if any prior sibling is not yet done.
Finally, if the parent is blocked because of ordered siblings of its own,
the child will also be blocked.
#+begin_src emacs-lisp
  (setq org-enforce-todo-dependencies t)
#+end_src

Non-nil means unchecked boxes will block switching the parent to DONE.
When this is nil, checkboxes have no influence on switching TODO states.
When non-nil, you first need to check off all check boxes before the TODO
entry can be switched to DONE.
This variable needs to be set before org.el is loaded, and you need to
restart Emacs after a change to make the change effective.  The only way
to change it while Emacs is running is through the customize interface.
#+begin_src emacs-lisp
  (setq org-enforce-todo-checkbox-dependencies t)
#+end_src

** Bookmarks

The number of times which Emacs’s bookmark list may be modified before
it is automatically saved.).  If it is a number, Emacs will also
automatically save bookmarks when it is killed.
#+begin_src emacs-lisp
  (setq bookmark-save-flag 1)
#+end_src

"Bookmark position values are saved with surrounding context, so that bookmark-jump can find the proper position even if the file is modified slightly. The variable bookmark-search-size says how many characters of context to record on each side of the bookmark’s position."

#+begin_src emacs-lisp
  (setq bookmark-search-size 30)
#+end_src

** Publishing
*** AsciiDoc
When I can't write in/publish from =org-mode=, AsciiDoc is my text markup language of choice. In some ways I even prefer it to =org-mode=! (Admonition blocks, ToCs rendered in github, includes!). [[https://asciidoctor.org/docs/what-is-asciidoc/][More on why it is great...]]

[[https://asciidoctor.org/docs/asciidoc-writers-guide/][In-depth writer's guide]] -- [[https://asciidoctor.org/docs/asciidoc-syntax-quick-reference/][Quick reference]]

#+BEGIN_SRC emacs-lisp
  (use-package adoc-mode
    :mode (("\\.adoc\\'" . adoc-mode)
           ("\\.asciidoc\\'" . adoc-mode))
    :custom-face
    (adoc-reference-face ((t (:foreground "CadetBlue2"))))
    (adoc-meta-face ((t (:foreground "pink1" :height 100))))
    (adoc-meta-hide-face ((t (:foreground "gray40" :height 100)))))
#+END_SRC

*** HTML
Required for =org-mode= HTML export:
#+BEGIN_SRC emacs-lisp
  (use-package htmlize
    )
#+END_SRC

*** LaTeX

Currently I only am using this at work.
#+BEGIN_SRC emacs-lisp
  (when (equal (init-computer-context) 'work)
    (setenv "PATH" (concat (getenv "PATH") ":/usr/local/texlive/2019/bin/x86_64-darwin"))
    (add-to-list'exec-path "/usr/local/texlive/2019/bin/x86_64-darwin"))
#+END_SRC

*** Markdown

For editing Markdown text.
#+BEGIN_SRC emacs-lisp
  (use-package markdown-mode
    :commands (markdown-mode gfm-mode)
    :mode (("README\\.md\\'" . gfm-mode)
           ("\\.md\\'" . markdown-mode)
           ("\\.markdown\\'" . markdown-mode))
    :init (setq markdown-command "pandoc")
    :config
    (setq markdown-header-scaling t))
#+END_SRC

*** Mermaid

To compile graphs in emacs, you'll need mermaid cli tools installed:

#+begin_src bash
  npm install -g @mermaid-js/mermaid-cli
#+end_src

#+begin_src emacs-lisp
  (use-package mermaid-mode)
#+end_src

*** COMMENT Org-mode export

#+begin_src emacs-lisp
  (use-package ox-pandoc)
#+end_src
#+begin_src emacs-lisp
  (setq org-export-initial-scope "subtree")
#+end_src

If you set this variable to the symbol ‘{}’, the braces are *required*
in order to trigger interpretations as sub/superscript. This can be
helpful in documents that need "_" frequently in plain text.
#+begin_src emacs-lisp
  (setq org-export-with-sub-superscripts '{})
#+end_src

=auto-org-md= is a simple package that exports a markdown file automatically when you save an org file. [[https://github.com/jamcha-aa/auto-org-md][github]]
#+BEGIN_SRC emacs-lisp :tangle no
  (use-package auto-org-md)
#+END_SRC

** Version control

Macro to format copied ~git log~ output for .git-blame-ignore-revs:
#+begin_src emacs-lisp
  (fset 'noblame
	(kmacro-lambda-form [?\S-\C-\M-s ?  return backspace ?\C-  ?\C-e ?\C-w ?\C-a ?# ?  ?\C-y return ?\C-e return ?\C-n] 0 "%d"))
#+end_src

Try =magit= again. Manual is [[https://magit.vc/manual/magit/index.html#Top][here]].
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :bind (("C-x g" . magit-status))
    :config
    (setq git-commit-style-convention-checks nil))
#+END_SRC

~git-commit-style-convention-checks~ doesn't nag you about super short commit messages.

This is supposed to be neat: it will let you step back in time through your changes. But I don't want to mess with it until I'm used to =magit=.
#+BEGIN_SRC emacs-lisp :tangle no
  (use-package git-timemachine
    :ensure t
    :bind (("s-g" . git-timemachine)))
#+END_SRC

** Writing

Sentences end with ONE space (from http://pages.sachachua.com/.emacs.d/Sacha.html)
#+BEGIN_SRC emacs-lisp
  (setq sentence-end-double-space nil)
#+END_SRC

** Auto customizations

Customization tool in Emacs should persist stuff in a separate file:
#+begin_src emacs-lisp
  ;;(setq custom-file "~/.emacs.d/auto-customize.el")
  ;;(load custom-file)
#+end_src

* Other good configs
** https://jamiecollinson.com/blog/my-emacs-config/

Ivy, Swiper, Counsel, Projectile, Org

NyanCat buffer progress

Magit and other git stuff
** https://github.com/mwfogleman/.emacs.d/blob/master/michael.org
** https://writequit.org/org/

#+BEGIN_QUOTE
This file takes a page out of the book of Hardcore Freestyle Emacs, in which a single org-file can be tangled to create all the necessary dotfiles required for my everyday computer usage.
#+END_QUOTE


* Improvements/changes

** TODO Change [[help:global-set-key][global-set-key]] to keymap-global-set
:LOGBOOK:
- State "TODO"       from              [2023-08-27 Sun 13:27]
:END:

** TODO Figure out how to prevent font size change from mouse interaction
:LOGBOOK:
- State "TODO"       from              [2023-08-27 Sun 13:27]
:END:

** TODO ibuffer: get vc groups to get updated in auto mode
:LOGBOOK:
- State "TODO"       from              [2023-08-27 Sun 13:29]
:END:

See note under ibuffer config for the current issue.

Maybe the vc groups [[https://www.reddit.com/r/emacs/comments/13qfepf/comment/jm3a6wj/][need to be a variable rather than a fuction]].

** TODO Figure out how to make fn key on secunit act like Ctrl
:LOGBOOK:
- State "TODO"       from              [2023-09-03 Sun 17:01]
:END:

The keys in the bottom-left corner of the keyboard on my Macbook are, from left-to-right: Fn, Ctrl

On my Dell (secunit) laptop, they are: Ctrl, Fn.

This is cognitive overload I don't need in my life. However, this may not be fixable within Emacs, ugh: https://stackoverflow.com/questions/27418756/is-it-possible-to-make-emacs-interpet-an-fn-key-as-a-modifier-key

#+begin_src emacs-lisp :tangle no
  (when (equal (system-name) 'secunit)
    (define-key function-key-map (kbd "<XF86Launch3>") 'event-apply-control-modifier))
#+end_src

** TODO Investigate consult for mark ring
:LOGBOOK:
- State "TODO"       from              [2024-03-22 Fri 11:10]
:END:

(use-package consult
  :ensure t)
It will provide you with the command consult-mark which you can use to browse all the positions in the mark rink — not only the last one in a LIFO fashion — and to have a real-time preview of the content you would jump to.
